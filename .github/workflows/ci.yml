name: CI

on: [push]

jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build
        run: |
          cmake -G "Visual Studio 15 2017" -A ${env:WINHOST} -S . -B bin/windows-${env:WINHOST}/${env:TARGET}
          cmake --build bin/windows-${env:WINHOST}/${env:TARGET}
        env:
          WINHOST: x64 
          TARGET: x86_64-linux-gnu
        shell: powershell

  linux:
    name: Linux
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2 

      - name: Build
        strategy:
          matrix:
            include:
              - HOST: x86_64-linux-gnu
                OPT: -O0
              - HOST: x86-linux-gnu
                OPT: -O0
              - HOST: arm-linux-gnueabihf
                OPT: -O0
              - HOST: aarch64-linux-gnu
                OPT: -O0
              - HOST: mipsel-linux-gnu
                OPT: -O0
              - HOST: powerpc64-linux-gnu
                OPT: -O0
              - HOST: x86_64-linux-gnu
                OPT: -O2
              - HOST: x86-linux-gnu
                OPT: -O2
              - HOST: arm-linux-gnueabihf
                OPT: -O2
              - HOST: aarch64-linux-gnu
                OPT: -O2
              - HOST: mipsel-linux-gnu
                OPT: -O2
              - HOST: powerpc64-linux-gnu
                OPT: -O2
              - HOST: x86_64-linux-gnu
                OPT: -O3
              - HOST: x86-linux-gnu
                OPT: -O3
              - HOST: arm-linux-gnueabihf
                OPT: -O3
              - HOST: aarch64-linux-gnu
                OPT: -O3
              - HOST: mipsel-linux-gnu
                OPT: -O3
              - HOST: powerpc64-linux-gnu
                OPT: -O3
        env:
          HOST: ${{ matrix.HOST }}
          OPT: ${{ matrix.OPT }}
        run: |
          BUILD=x86_64-linux-gnu
          export BUILD
          if [ $HOST = 'x86-linux-gnu' ]; then
            sudo apt-get update 
            sudo apt-get install -yqq -o=Dpkg::Use-Pty=0 g++-multilib
            CFLAGS=" -m32"
            CXXFLAGS=" -m32"
            export CFLAGS CXXFLAGS
          elif [ $HOST != 'x86_64-linux-gnu' ]; then
            sudo apt-get update
            sudo apt-get install -yqq -o=Dpkg::Use-Pty=0 g++-$HOST
            CC=$HOST-gcc
            CXX=$HOST-g++
            export CC CXX
          fi
          CFLAGS="$CFLAGS $OPT"
          CXXFLAGS="$CXXFLAGS $OPT"
          export CFLAGS CXXFLAGS
          autoreconf -i
          ./configure CC=$CC CXX=$CXX CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" --build=$BUILD --HOST: $HOST
          make -j32
          sudo bash -c 'echo core.%p.%p > /proc/sys/kernel/core_pattern'
          ulimit -c unlimited
          if [ $HOST = 'x86_64-linux-gnu' ]; then make check -j32; fi
